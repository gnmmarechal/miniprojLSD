// Copyright (C) 1991-2015 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus Prime License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/15/2018 06:30:00"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          TimeFormatConverter
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module TimeFormatConverter_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [11:0] b_input;
// wires                                               
wire [3:0] minOut0;
wire [3:0] minOut1;
wire [3:0] secOut0;
wire [3:0] secOut1;

// assign statements (if any)                          
TimeFormatConverter i1 (
// port map - connection between master ports and signals/registers   
	.b_input(b_input),
	.minOut0(minOut0),
	.minOut1(minOut1),
	.secOut0(secOut0),
	.secOut1(secOut1)
);
initial 
begin 
#1000000 $finish;
end 
// b_input[ 11 ]
initial
begin
	b_input[11] = 1'b1;
	b_input[11] = #100000 1'b0;
	b_input[11] = #260000 1'b1;
end 
// b_input[ 10 ]
initial
begin
	b_input[10] = 1'b1;
	b_input[10] = #100000 1'b0;
	b_input[10] = #260000 1'b1;
end 
// b_input[ 9 ]
initial
begin
	b_input[9] = 1'b1;
	b_input[9] = #100000 1'b0;
	b_input[9] = #260000 1'b1;
end 
// b_input[ 8 ]
initial
begin
	b_input[8] = 1'b0;
	b_input[8] = #310000 1'b1;
	b_input[8] = #50000 1'b0;
end 
// b_input[ 7 ]
initial
begin
	b_input[7] = 1'b0;
end 
// b_input[ 6 ]
initial
begin
	b_input[6] = 1'b0;
	b_input[6] = #260000 1'b1;
	b_input[6] = #100000 1'b0;
end 
// b_input[ 5 ]
initial
begin
	b_input[5] = 1'b0;
	b_input[5] = #100000 1'b1;
	b_input[5] = #110000 1'b0;
	b_input[5] = #50000 1'b1;
	b_input[5] = #100000 1'b0;
end 
// b_input[ 4 ]
initial
begin
	b_input[4] = 1'b0;
	b_input[4] = #100000 1'b1;
	b_input[4] = #110000 1'b0;
	b_input[4] = #50000 1'b1;
	b_input[4] = #50000 1'b0;
end 
// b_input[ 3 ]
initial
begin
	b_input[3] = 1'b1;
	b_input[3] = #210000 1'b0;
	b_input[3] = #50000 1'b1;
end 
// b_input[ 2 ]
initial
begin
	b_input[2] = 1'b1;
	b_input[2] = #150000 1'b0;
	b_input[2] = #210000 1'b1;
end 
// b_input[ 1 ]
initial
begin
	b_input[1] = 1'b1;
	b_input[1] = #100000 1'b0;
	b_input[1] = #50000 1'b1;
	b_input[1] = #60000 1'b0;
	b_input[1] = #150000 1'b1;
end 
// b_input[ 0 ]
initial
begin
	b_input[0] = 1'b1;
	b_input[0] = #40000 1'b0;
	b_input[0] = #110000 1'b1;
	b_input[0] = #60000 1'b0;
	b_input[0] = #150000 1'b1;
end 
endmodule

